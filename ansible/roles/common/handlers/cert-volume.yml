

# If the private-config is not there, then ask the user for the input information
- name: Create CERTS Vol Backup directory
  file: path={{ certs_vol }}/certs state=directory


# Handles the CERTS Volumes
- name: check-server-crt
  listen: load certs-vol
  stat:
    path: '{{ certs_vol }}/certs/server.crt'
  register: cert_server_stat
  changed_when: True  
  notify:
    - Create New Certs

- name: check-server-key
  listen: load certs-vol
  stat:
    path: '{{ certs_vol }}/certs/server.key'
  register: key_server_stat
  changed_when: True
  notify:
    - Create New Certs


- name: Move CERTS config to volume
  docker_container:
    name: helper
    image: williamyeh/ansible:alpine3
    state: started
    volumes: 
     - "certs:/certs"
     - "{{ certs_vol }}/certs:/data"
    command: "cp -a /data/. /certs/"
    cleanup: yes
  listen: Create New Certs
  when: "key_server_stat.stat.exists and cert_server_stat.stat.exists"

- name: Fail because no certs found
  fail:
    msg: "server.key and server.cert not found in {{ certs_vol }}/certs and in production mode.  Please create certs and store in {{ certs_vol }}/certs"
  listen: Create New Certs
  when: "not (key_server_stat.stat.exists and cert_server_stat.stat.exists) and run_mode == 'prod'"

- name: Create New Certs
  when: "not (key_server_stat.stat.exists and cert_server_stat.stat.exists) and run_mode == 'dev'"
  docker_container:
    name: "unfetter-discover-openssl"
    image: "svagi/openssl:latest"
    state: started
    networks:
      - name: "{{ docker_network_name }}"          
    
    pull: true
    exposed_ports: 
    - 443:443
    - 80:80
    entrypoint:
     - openssl
     - req
     - -subj
     - /CN=localhost/DC=localhost/DC=localdomain
     - -new
     - -newkey
     - rsa:2048
     - -days
     - "365"
     - -nodes
     - -x509
     - -keyout
     - /tmp/certs/server.key
     - -out
     - /tmp/certs/server.crt
    volumes:
     - "certs:/tmp/certs:rw"



  