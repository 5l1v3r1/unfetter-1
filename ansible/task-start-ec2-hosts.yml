---
####################################################################################
# This Playbook will attempt to deploy EC2 instances, configured properly for testing
#    and operation 
#
####################################################################################


- hosts: 127.0.0.1
  vars:
    
    build: false # If send in a "true", then will actually build any of the hosts
    # This is used to distinquish between deployment groups.  Each user could have their own test 
    #   Environment
    deployment_group: "{{ deployment_owner | default('unfetter')"
    deploy_tag_name: "unfetter-deploy"
    owner_tag_name: "deployment-group"
  connection: local
   
  tasks:
  - debug:
      msg: "{{ groups['deployed'] }}"

  - name: "Determine if EC2 instances are created"
    ec2_instance_facts:
        filters:
            "tag:unfetter-deploy": "{{ groups['deployed'] }}"

            "instance-state-name": 
                 - "starting"
                 - "running"
                 - "pending"
                 - "stopping"
                 - "stopped"

    register: ec2_facts
  - name: "showing groups['deployed']"
    debug:
      msg: "{{ groups['deployed'] }}"

  - set_fact: 
     deployed_names: []
  - name: "building deployed_names"
    set_fact: 
      deployed_names: "{{ groups['deployed'] }}"
  - debug:
       msg: "{{ item }}"
    with_items: "{{ deployed_names }}"

  - set_fact:
      found_ec2: "{{ ec2_facts.instances|map(attribute='tags.{{ deploy_tag_name }}')|list }}"
  - name: "Display found"
    debug:
      var: found_ec2


  - set_fact:
       no_ec2_list: []
  - set_fact: 
       no_ec2_list: "{{ no_ec2_list|default([]) | union([item]) }}"
    with_items: "{{ deployed_names }}"
    when: item not in found_ec2 

  - name: Failed if EC2's were not found
    fail:
       msg: "WARNING: The Following EC2 Instances have not been deployed: {{ no_ec2_list }}"
    when: no_ec2_list|length > 0 


  - name: "Start Stopped Instances"
    ec2:
       region: '{{ region }}'
       instance_tags:
          unfetter-deploy: "{{ item }}"
       state: running
    with_items: "{{ groups['deployed'] }}"

- hosts: deployed
  vars:
  tasks:
     - debug: msg="play_hosts={{ play_hosts }}"
